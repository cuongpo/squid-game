#!/usr/bin/env node

/**
 * End-to-End Test Runner for Blockchain Integration
 *
 * This script runs the complete end-to-end test flow for the Squid Game
 * blockchain integration on Etherlink testnet.
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// Test configuration
const TEST_CONFIG = {
  WALLET_ADDRESS: '0x054d4b7231Cb605C48a04fA0f72Af1E9A7c0A824',
  GAME_CONTRACT: '0x6bE8cd94EE2d823AaF804DA806C829d6F0cf678b',
  NARRATIVE_CONTRACT: '0xd4A5e748a5fa8Fc3a33a2BFAcE90283d92749C99',
  REQUIRED_XTZ: '0.2',
  ETHERLINK_RPC: 'https://node.ghostnet.etherlink.com'
};

console.log('üöÄ Squid Game E2E Blockchain Test Runner');
console.log('='.repeat(60));

async function checkPrerequisites() {
  console.log('\nüìã Checking Prerequisites...');
  
  // Check if contracts are deployed
  console.log(`üèóÔ∏è  Game Contract: ${TEST_CONFIG.GAME_CONTRACT}`);
  console.log(`üìñ Narrative Contract: ${TEST_CONFIG.NARRATIVE_CONTRACT}`);
  
  // Check if .env file exists
  if (!fs.existsSync('.env')) {
    console.error('‚ùå .env file not found');
    return false;
  }
  
  // Check if deployment info exists
  if (!fs.existsSync('deployment-info.json')) {
    console.error('‚ùå deployment-info.json not found - contracts may not be deployed');
    return false;
  }
  
  const deploymentInfo = JSON.parse(fs.readFileSync('deployment-info.json', 'utf8'));
  console.log(`‚úÖ Contracts deployed at: ${deploymentInfo.deployedAt}`);
  console.log(`‚úÖ Deployer: ${deploymentInfo.deployer}`);
  
  return true;
}

async function runPreTestChecks() {
  console.log('\nüîç Running Pre-Test Checks...');
  
  // Check wallet balance (this would require ethers.js)
  console.log(`üí∞ Wallet: ${TEST_CONFIG.WALLET_ADDRESS}`);
  console.log(`‚ö†Ô∏è  Ensure you have at least ${TEST_CONFIG.REQUIRED_XTZ} XTZ for testing`);

  // Check network connectivity
  console.log(`üåê Network: Etherlink Testnet (${TEST_CONFIG.ETHERLINK_RPC})`);
  
  // Verify application is not running
  console.log('üîÑ Make sure the application is stopped before running E2E tests');
  
  return true;
}

function createTestReport() {
  const reportPath = path.join(__dirname, 'e2e-test-report.md');
  const timestamp = new Date().toISOString();
  
  const report = `# End-to-End Test Report

**Test Run:** ${timestamp}
**Network:** Avalanche Testnet
**Wallet:** ${TEST_CONFIG.WALLET_ADDRESS}

## Contracts Tested
- **Game Contract:** ${TEST_CONFIG.GAME_CONTRACT}
- **Narrative Contract:** ${TEST_CONFIG.NARRATIVE_CONTRACT}

## Test Phases
1. ‚úÖ Wallet Connection & Setup
2. ‚úÖ Game Creation & Blockchain Integration  
3. ‚úÖ Blockchain Betting
4. ‚úÖ Game Simulation with Onchain Narratives
5. ‚úÖ Game Completion & Payouts
6. ‚úÖ Blockchain Verification

## Explorer Links
- [Game Contract](https://testnet.snowtrace.io/address/${TEST_CONFIG.GAME_CONTRACT})
- [Narrative Contract](https://testnet.snowtrace.io/address/${TEST_CONFIG.NARRATIVE_CONTRACT})

## Test Results
See console output for detailed results.

---
*Generated by Squid Game E2E Test Runner*
`;

  fs.writeFileSync(reportPath, report);
  console.log(`üìÑ Test report saved to: ${reportPath}`);
}

async function runE2ETest() {
  console.log('\nüß™ Running End-to-End Test...');
  
  return new Promise((resolve, reject) => {
    const testProcess = spawn('npm', ['test', 'e2e-blockchain-flow.test.ts'], {
      stdio: 'inherit',
      shell: true
    });
    
    testProcess.on('close', (code) => {
      if (code === 0) {
        console.log('\n‚úÖ E2E Test Completed Successfully!');
        resolve(true);
      } else {
        console.log('\n‚ùå E2E Test Failed');
        reject(new Error(`Test failed with code ${code}`));
      }
    });
    
    testProcess.on('error', (error) => {
      console.error('‚ùå Failed to run test:', error);
      reject(error);
    });
  });
}

function printTestInstructions() {
  console.log('\nüìö MANUAL TEST INSTRUCTIONS');
  console.log('='.repeat(40));
  console.log('If automated tests fail, follow these manual steps:');
  console.log('');
  console.log('1. üîå Connect MetaMask to Avalanche Testnet');
  console.log('   - Network: Avalanche Fuji Testnet');
  console.log('   - Chain ID: 43113');
  console.log('   - RPC: https://api.avax-test.network/ext/bc/C/rpc');
  console.log('');
  console.log('2. üí∞ Ensure Sufficient AVAX Balance');
  console.log(`   - Wallet: ${TEST_CONFIG.WALLET_ADDRESS}`);
  console.log(`   - Required: ${TEST_CONFIG.REQUIRED_AVAX} AVAX minimum`);
  console.log('   - Faucet: https://faucet.avax.network/');
  console.log('');
  console.log('3. üéÆ Test Application Flow');
  console.log('   - Start app: npm run dev');
  console.log('   - Visit: http://localhost:5173/');
  console.log('   - Connect wallet');
  console.log('   - Enable "Blockchain (AVAX)" betting');
  console.log('   - Place bets and simulate game');
  console.log('');
  console.log('4. üîç Verify on Blockchain');
  console.log(`   - Game Contract: https://testnet.snowtrace.io/address/${TEST_CONFIG.GAME_CONTRACT}`);
  console.log(`   - Narrative Contract: https://testnet.snowtrace.io/address/${TEST_CONFIG.NARRATIVE_CONTRACT}`);
  console.log('');
}

function printSuccessSummary() {
  console.log('\nüéâ E2E TEST SUCCESS SUMMARY');
  console.log('='.repeat(50));
  console.log('‚úÖ Wallet connection to Avalanche testnet');
  console.log('‚úÖ Smart contract deployment and configuration');
  console.log('‚úÖ Blockchain game creation');
  console.log('‚úÖ AVAX betting with real transactions');
  console.log('‚úÖ Onchain narrative logging during simulation');
  console.log('‚úÖ Automatic smart contract payouts');
  console.log('‚úÖ Game completion and result storage');
  console.log('‚úÖ Transaction verification on Snowtrace');
  console.log('');
  console.log('üèÜ YOUR SQUID GAME BLOCKCHAIN INTEGRATION IS FULLY FUNCTIONAL!');
  console.log('');
  console.log('üîó Contract Addresses:');
  console.log(`   Game: ${TEST_CONFIG.GAME_CONTRACT}`);
  console.log(`   Narrative: ${TEST_CONFIG.NARRATIVE_CONTRACT}`);
  console.log('');
  console.log('üåê Avalanche Testnet Explorer:');
  console.log('   https://testnet.snowtrace.io/');
  console.log('');
}

// Main execution
async function main() {
  try {
    // Check prerequisites
    const prereqsOk = await checkPrerequisites();
    if (!prereqsOk) {
      console.error('‚ùå Prerequisites check failed');
      process.exit(1);
    }
    
    // Run pre-test checks
    await runPreTestChecks();
    
    // Ask user to confirm
    console.log('\n‚ö†Ô∏è  IMPORTANT: Make sure MetaMask is connected to Avalanche testnet');
    console.log('‚ö†Ô∏è  IMPORTANT: Ensure you have sufficient AVAX for testing');
    console.log('‚ö†Ô∏è  IMPORTANT: Close the application if it\'s running');
    console.log('\nPress Ctrl+C to cancel, or wait 10 seconds to continue...');
    
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    // Run the actual E2E test
    await runE2ETest();
    
    // Create test report
    createTestReport();
    
    // Print success summary
    printSuccessSummary();
    
  } catch (error) {
    console.error('\n‚ùå E2E Test Failed:', error.message);
    console.log('\nüìö Troubleshooting:');
    console.log('1. Check wallet connection and balance');
    console.log('2. Verify contracts are deployed correctly');
    console.log('3. Ensure network connectivity to Avalanche testnet');
    console.log('4. Check browser console for detailed errors');
    
    printTestInstructions();
    process.exit(1);
  }
}

// Handle interruption
process.on('SIGINT', () => {
  console.log('\n\n‚ö†Ô∏è  Test interrupted by user');
  printTestInstructions();
  process.exit(0);
});

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { main, TEST_CONFIG };
